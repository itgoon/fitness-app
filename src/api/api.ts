/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthFirebaseCustomTokenPostRequest
 */
export interface AuthFirebaseCustomTokenPostRequest {
    /**
     * UID 값 ( email )
     * @type {string}
     * @memberof AuthFirebaseCustomTokenPostRequest
     */
    'uid': string;
    /**
     * NAME
     * @type {string}
     * @memberof AuthFirebaseCustomTokenPostRequest
     */
    'name': string;
    /**
     * [NAVER]
     * @type {string}
     * @memberof AuthFirebaseCustomTokenPostRequest
     */
    'type': string;
    /**
     * EMAIL
     * @type {string}
     * @memberof AuthFirebaseCustomTokenPostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AuthLoginPostRequest
 */
export interface AuthLoginPostRequest {
    /**
     * 로그인 아이디 ( 이메일 )
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'userId': string;
    /**
     * 로그인 패스워드
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'password': string;
    /**
     * DEVICE_TYPE Device 타입 [ WEB, ANDROID, IOS]
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'deviceType': string;
    /**
     * Firebase Device Token
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'deviceToken'?: string;
}
/**
 * 
 * @export
 * @interface AuthSocialLoginPostRequest
 */
export interface AuthSocialLoginPostRequest {
    /**
     * firebase auth token
     * @type {string}
     * @memberof AuthSocialLoginPostRequest
     */
    'authToken': string;
    /**
     * DEVICE_TYPE Device 타입 [ WEB, ANDROID, IOS]
     * @type {string}
     * @memberof AuthSocialLoginPostRequest
     */
    'deviceType': string;
    /**
     * Firebase Device Token
     * @type {string}
     * @memberof AuthSocialLoginPostRequest
     */
    'deviceToken'?: string;
}
/**
 * 
 * @export
 * @interface CommutesIdEndPutRequest
 */
export interface CommutesIdEndPutRequest {
    /**
     * 출퇴근 식별자 ID
     * @type {number}
     * @memberof CommutesIdEndPutRequest
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CommutesStoreIdPostRequest
 */
export interface CommutesStoreIdPostRequest {
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof CommutesStoreIdPostRequest
     */
    'storeId': number;
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof CommutesStoreIdPostRequest
     */
    'userId': number;
    /**
     * 근무일자
     * @type {string}
     * @memberof CommutesStoreIdPostRequest
     */
    'date': string;
    /**
     * 근무 시작 시간
     * @type {string}
     * @memberof CommutesStoreIdPostRequest
     */
    'startTime': string;
    /**
     * 근무 종료 시간
     * @type {string}
     * @memberof CommutesStoreIdPostRequest
     */
    'endTime': string;
    /**
     * 휴무 여부
     * @type {boolean}
     * @memberof CommutesStoreIdPostRequest
     */
    'isOffDuty'?: boolean;
}
/**
 * 
 * @export
 * @interface CommutesStoreIdPutRequest
 */
export interface CommutesStoreIdPutRequest {
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof CommutesStoreIdPutRequest
     */
    'storeId': number;
    /**
     * 출퇴근 식별자 ID
     * @type {number}
     * @memberof CommutesStoreIdPutRequest
     */
    'id': number;
    /**
     * 근무 시작 시간
     * @type {string}
     * @memberof CommutesStoreIdPutRequest
     */
    'startTime'?: string;
    /**
     * 근무 종료 시간
     * @type {string}
     * @memberof CommutesStoreIdPutRequest
     */
    'endTime'?: string;
    /**
     * 휴무 여부
     * @type {boolean}
     * @memberof CommutesStoreIdPutRequest
     */
    'isOffDuty'?: boolean;
}
/**
 * 
 * @export
 * @interface CommutesStoreIdWorktimePutRequest
 */
export interface CommutesStoreIdWorktimePutRequest {
    /**
     * 출퇴근 식별자 ID
     * @type {number}
     * @memberof CommutesStoreIdWorktimePutRequest
     */
    'id'?: number;
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof CommutesStoreIdWorktimePutRequest
     */
    'storeId': number;
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof CommutesStoreIdWorktimePutRequest
     */
    'userId': number;
    /**
     * 근무 일자
     * @type {string}
     * @memberof CommutesStoreIdWorktimePutRequest
     */
    'date': string;
    /**
     * 근무 일정 시작 시간
     * @type {string}
     * @memberof CommutesStoreIdWorktimePutRequest
     */
    'startTime': string;
    /**
     * 근무 일정 종료 시간
     * @type {string}
     * @memberof CommutesStoreIdWorktimePutRequest
     */
    'endTime': string;
    /**
     * 근무 시작 시간
     * @type {string}
     * @memberof CommutesStoreIdWorktimePutRequest
     */
    'workStartDate': string;
    /**
     * 근무 시작 시간
     * @type {string}
     * @memberof CommutesStoreIdWorktimePutRequest
     */
    'workEndDate': string;
}
/**
 * 
 * @export
 * @interface ContractsIdCompletePutRequest
 */
export interface ContractsIdCompletePutRequest {
    /**
     * 근로계약서 식별자 ID
     * @type {number}
     * @memberof ContractsIdCompletePutRequest
     */
    'id': number;
    /**
     * 직원 서명 이미지 파일
     * @type {any}
     * @memberof ContractsIdCompletePutRequest
     */
    'file': any;
}
/**
 * 
 * @export
 * @interface ContractsPostRequest
 */
export interface ContractsPostRequest {
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof ContractsPostRequest
     */
    'storeId': number;
    /**
     * 직원 ID
     * @type {number}
     * @memberof ContractsPostRequest
     */
    'userId': number;
    /**
     * 매장명
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'storeName': string;
    /**
     * 회사명
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'companyName': string;
    /**
     * 회사 대표이름
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'companyRepresentName': string;
    /**
     * 회사 전화번호
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'companyPhoneNumber': string;
    /**
     * 회사 주소
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'companyAddress': string;
    /**
     * 직원명
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'employeeName': string;
    /**
     * 직원 연락처
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'employeePhoneNumber': string;
    /**
     * 직무
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'dutyName': string;
    /**
     * 직책
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'responsibilityName': string;
    /**
     * 프로필 이미지
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'profileUrl': string;
    /**
     * 근무 장소
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'workAddress': string;
    /**
     * 업무 내용
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'dutyDesc': string;
    /**
     * 근무 시작일
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'workStartDate': string;
    /**
     * 근무 종료일
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'workEndDate': string;
    /**
     * 급여타입 [hourly(시급), daily(일급), salary(월급)]
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'salaryType': string;
    /**
     * 급여값
     * @type {number}
     * @memberof ContractsPostRequest
     */
    'salaryAmount': number;
    /**
     * 급여지급타입(매일,매주,매월)
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'salaryPaymentType': string;
    /**
     * 급여지급일-매주[0(일),1(월),2(화),3(수),4(목),5(금),6(토)], 매월[1~31]
     * @type {number}
     * @memberof ContractsPostRequest
     */
    'salaryPaymentTypeValue'?: number;
    /**
     * 급여지급방법 [accountTransfer(계좌이체), directly(직접)]
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'salaryPaymentMethod': string;
    /**
     * 기타 급여 json {\"식대\": 100000, \"연차수당\", 300000}
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'otherSalarypayments'?: string;
    /**
     * 근무 일정 목록
     * @type {string}
     * @memberof ContractsPostRequest
     */
    'schedules': string;
    /**
     * 국민연금
     * @type {boolean}
     * @memberof ContractsPostRequest
     */
    'isNationalPension': boolean;
    /**
     * 건강보험
     * @type {boolean}
     * @memberof ContractsPostRequest
     */
    'isHealthIns': boolean;
    /**
     * 고용보험
     * @type {boolean}
     * @memberof ContractsPostRequest
     */
    'isEmpIns': boolean;
    /**
     * 산재보험
     * @type {boolean}
     * @memberof ContractsPostRequest
     */
    'isCompIns': boolean;
    /**
     * 18세 미만 여부
     * @type {boolean}
     * @memberof ContractsPostRequest
     */
    'isMinor': boolean;
}
/**
 * 
 * @export
 * @interface EmployInfoDelPutRequest
 */
export interface EmployInfoDelPutRequest {
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof EmployInfoDelPutRequest
     */
    'userId': number;
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof EmployInfoDelPutRequest
     */
    'storeId': number;
}
/**
 * 
 * @export
 * @interface EmployInfoPutRequest
 */
export interface EmployInfoPutRequest {
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof EmployInfoPutRequest
     */
    'userId': number;
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof EmployInfoPutRequest
     */
    'storeId': number;
    /**
     * 근무일 (YYYY-MM-DD)
     * @type {string}
     * @memberof EmployInfoPutRequest
     */
    'workingDate': string;
    /**
     * 퇴사일 (YYYY-MM-DD)
     * @type {string}
     * @memberof EmployInfoPutRequest
     */
    'quitDate': string;
    /**
     * 급여타입 [hourly(시급), daily(일급), salary(월급)]
     * @type {string}
     * @memberof EmployInfoPutRequest
     */
    'salaryType': string;
    /**
     * 급여값
     * @type {number}
     * @memberof EmployInfoPutRequest
     */
    'salaryAmount': number;
    /**
     * 급여지급타입 [everyday(매일),everyweek(매주),monthly(매월)]
     * @type {string}
     * @memberof EmployInfoPutRequest
     */
    'salaryPaymentType': string;
    /**
     * 급여지급일-매주[0(일),1(월),2(화),3(수),4(목),5(금),6(토)], 매월[1~31]
     * @type {number}
     * @memberof EmployInfoPutRequest
     */
    'salaryPaymentTypeValue'?: number;
    /**
     * 담당 업무
     * @type {string}
     * @memberof EmployInfoPutRequest
     */
    'dutyDesc'?: string;
}
/**
 * 
 * @export
 * @interface EmployInfoResignPutRequest
 */
export interface EmployInfoResignPutRequest {
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof EmployInfoResignPutRequest
     */
    'userId': number;
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof EmployInfoResignPutRequest
     */
    'storeId': number;
    /**
     * 근무시작일자
     * @type {string}
     * @memberof EmployInfoResignPutRequest
     */
    'workingDate': string;
    /**
     * 근무종료일자
     * @type {string}
     * @memberof EmployInfoResignPutRequest
     */
    'quitDate': string;
}
/**
 * 
 * @export
 * @interface PaystubsIdSendPostRequest
 */
export interface PaystubsIdSendPostRequest {
    /**
     * 급여명세서 식별자 ID
     * @type {number}
     * @memberof PaystubsIdSendPostRequest
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface PaystubsPutRequest
 */
export interface PaystubsPutRequest {
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof PaystubsPutRequest
     */
    'storeId': number;
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof PaystubsPutRequest
     */
    'userId': number;
    /**
     * 년월 ( yyyy-mm)
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'yyyymm': string;
    /**
     * 근로자 이름
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'userName'?: string;
    /**
     * 입사일
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'startDate'?: string;
    /**
     * 지급일
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'salaryPaymentDate'?: string;
    /**
     * 급여계산 시작일자
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'salaryPaymentStartDate'?: string;
    /**
     * 급여계산 종료일자
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'salaryPaymentEndDate'?: string;
    /**
     * 급여유형 [hourly(시급), daily(일급), salary(월급)]
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'salaryType'?: string;
    /**
     * 기본급-근무시간(일) > 근무시간[급여유형-시급] | 근무일[급여유형-일급]
     * @type {number}
     * @memberof PaystubsPutRequest
     */
    'workingDateNumber'?: number;
    /**
     * 기본급
     * @type {number}
     * @memberof PaystubsPutRequest
     */
    'baseSalary'?: number;
    /**
     * 지급항목 json
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'otherSalarypayments'?: string;
    /**
     * 공제 항목
     * @type {string}
     * @memberof PaystubsPutRequest
     */
    'deductionItems'?: string;
}
/**
 * 
 * @export
 * @interface ResignHistoriesPostRequest
 */
export interface ResignHistoriesPostRequest {
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof ResignHistoriesPostRequest
     */
    'userId': number;
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof ResignHistoriesPostRequest
     */
    'storeId': number;
    /**
     * 이력 내역
     * @type {string}
     * @memberof ResignHistoriesPostRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SignIdPutRequest
 */
export interface SignIdPutRequest {
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof SignIdPutRequest
     */
    'id': number;
    /**
     * 서명 이미지 파일
     * @type {any}
     * @memberof SignIdPutRequest
     */
    'file': any;
}
/**
 * 
 * @export
 * @interface StoresStoreIdPutRequest
 */
export interface StoresStoreIdPutRequest {
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof StoresStoreIdPutRequest
     */
    'storeId': number;
    /**
     * 출퇴근 허용거리
     * @type {number}
     * @memberof StoresStoreIdPutRequest
     */
    'allowCommuteDistance': number;
    /**
     * 지각 허용 시간
     * @type {number}
     * @memberof StoresStoreIdPutRequest
     */
    'allowLateMin': number;
    /**
     * 조퇴 허용 시간
     * @type {number}
     * @memberof StoresStoreIdPutRequest
     */
    'allowLeaveEarlyMin': number;
}
/**
 * 
 * @export
 * @interface TokensPutRequest
 */
export interface TokensPutRequest {
    /**
     * 토큰
     * @type {string}
     * @memberof TokensPutRequest
     */
    'deviceToken': string;
}
/**
 * 
 * @export
 * @interface UserPushPutRequest
 */
export interface UserPushPutRequest {
    /**
     * 푸시 알림 설정
     * @type {boolean}
     * @memberof UserPushPutRequest
     */
    'isPush': boolean;
}
/**
 * 
 * @export
 * @interface WorkSchedulsPutRequest
 */
export interface WorkSchedulsPutRequest {
    /**
     * 사용자 식별자 ID
     * @type {number}
     * @memberof WorkSchedulsPutRequest
     */
    'userId': number;
    /**
     * 매장 식별자 ID
     * @type {number}
     * @memberof WorkSchedulsPutRequest
     */
    'storeId': number;
    /**
     * 근무 일정 목록
     * @type {string}
     * @memberof WorkSchedulsPutRequest
     */
    'schedules': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Firebase Custom Token 생성
         * @summary createCustomToken
         * @param {AuthFirebaseCustomTokenPostRequest} [authFirebaseCustomTokenPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authFirebaseCustomTokenPost: async (authFirebaseCustomTokenPostRequest?: AuthFirebaseCustomTokenPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/firebase-custom-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authFirebaseCustomTokenPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 아이디 로그인
         * @summary login
         * @param {AuthLoginPostRequest} [authLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (authLoginPostRequest?: AuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 소셜 로그인
         * @summary socialLogin
         * @param {AuthSocialLoginPostRequest} [authSocialLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSocialLoginPost: async (authSocialLoginPostRequest?: AuthSocialLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/social-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSocialLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Firebase Custom Token 생성
         * @summary createCustomToken
         * @param {AuthFirebaseCustomTokenPostRequest} [authFirebaseCustomTokenPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authFirebaseCustomTokenPost(authFirebaseCustomTokenPostRequest?: AuthFirebaseCustomTokenPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authFirebaseCustomTokenPost(authFirebaseCustomTokenPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authFirebaseCustomTokenPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 아이디 로그인
         * @summary login
         * @param {AuthLoginPostRequest} [authLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(authLoginPostRequest?: AuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(authLoginPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authLoginPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 소셜 로그인
         * @summary socialLogin
         * @param {AuthSocialLoginPostRequest} [authSocialLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSocialLoginPost(authSocialLoginPostRequest?: AuthSocialLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSocialLoginPost(authSocialLoginPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authSocialLoginPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Firebase Custom Token 생성
         * @summary createCustomToken
         * @param {AuthApiAuthFirebaseCustomTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authFirebaseCustomTokenPost(requestParameters: AuthApiAuthFirebaseCustomTokenPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authFirebaseCustomTokenPost(requestParameters.authFirebaseCustomTokenPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 아이디 로그인
         * @summary login
         * @param {AuthApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(requestParameters: AuthApiAuthLoginPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authLoginPost(requestParameters.authLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 소셜 로그인
         * @summary socialLogin
         * @param {AuthApiAuthSocialLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSocialLoginPost(requestParameters: AuthApiAuthSocialLoginPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authSocialLoginPost(requestParameters.authSocialLoginPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authFirebaseCustomTokenPost operation in AuthApi.
 * @export
 * @interface AuthApiAuthFirebaseCustomTokenPostRequest
 */
export interface AuthApiAuthFirebaseCustomTokenPostRequest {
    /**
     * 
     * @type {AuthFirebaseCustomTokenPostRequest}
     * @memberof AuthApiAuthFirebaseCustomTokenPost
     */
    readonly authFirebaseCustomTokenPostRequest?: AuthFirebaseCustomTokenPostRequest
}

/**
 * Request parameters for authLoginPost operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginPostRequest
 */
export interface AuthApiAuthLoginPostRequest {
    /**
     * 
     * @type {AuthLoginPostRequest}
     * @memberof AuthApiAuthLoginPost
     */
    readonly authLoginPostRequest?: AuthLoginPostRequest
}

/**
 * Request parameters for authSocialLoginPost operation in AuthApi.
 * @export
 * @interface AuthApiAuthSocialLoginPostRequest
 */
export interface AuthApiAuthSocialLoginPostRequest {
    /**
     * 
     * @type {AuthSocialLoginPostRequest}
     * @memberof AuthApiAuthSocialLoginPost
     */
    readonly authSocialLoginPostRequest?: AuthSocialLoginPostRequest
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Firebase Custom Token 생성
     * @summary createCustomToken
     * @param {AuthApiAuthFirebaseCustomTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authFirebaseCustomTokenPost(requestParameters: AuthApiAuthFirebaseCustomTokenPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authFirebaseCustomTokenPost(requestParameters.authFirebaseCustomTokenPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 아이디 로그인
     * @summary login
     * @param {AuthApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(requestParameters: AuthApiAuthLoginPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(requestParameters.authLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 소셜 로그인
     * @summary socialLogin
     * @param {AuthApiAuthSocialLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSocialLoginPost(requestParameters: AuthApiAuthSocialLoginPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSocialLoginPost(requestParameters.authSocialLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommonApi - axios parameter creator
 * @export
 */
export const CommonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 브랜드 담당자 조회
         * @summary getBrandManager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsBrandCodeManagerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/brands/{brandCode}/manager`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 브랜드 목록 조회
         * @summary getBrands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonApi - functional programming interface
 * @export
 */
export const CommonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonApiAxiosParamCreator(configuration)
    return {
        /**
         * 브랜드 담당자 조회
         * @summary getBrandManager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsBrandCodeManagerGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsBrandCodeManagerGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommonApi.brandsBrandCodeManagerGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 브랜드 목록 조회
         * @summary getBrands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommonApi.brandsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CommonApi - factory interface
 * @export
 */
export const CommonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonApiFp(configuration)
    return {
        /**
         * 브랜드 담당자 조회
         * @summary getBrandManager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsBrandCodeManagerGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.brandsBrandCodeManagerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 브랜드 목록 조회
         * @summary getBrands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.brandsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonApi - object-oriented interface
 * @export
 * @class CommonApi
 * @extends {BaseAPI}
 */
export class CommonApi extends BaseAPI {
    /**
     * 브랜드 담당자 조회
     * @summary getBrandManager
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public brandsBrandCodeManagerGet(options?: RawAxiosRequestConfig) {
        return CommonApiFp(this.configuration).brandsBrandCodeManagerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 브랜드 목록 조회
     * @summary getBrands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public brandsGet(options?: RawAxiosRequestConfig) {
        return CommonApiFp(this.configuration).brandsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommutesApi - axios parameter creator
 * @export
 */
export const CommutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 퇴근
         * @summary updateCommuteWorkEnd
         * @param {CommutesIdEndPutRequest} [commutesIdEndPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesIdEndPut: async (commutesIdEndPutRequest?: CommutesIdEndPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commutes/{id}/end`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commutesIdEndPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 출근
         * @summary updateCommuteWorkStart
         * @param {CommutesIdEndPutRequest} [commutesIdEndPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesIdStartPut: async (commutesIdEndPutRequest?: CommutesIdEndPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commutes/{id}/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commutesIdEndPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 출퇴근 목록 조회
         * @summary getCommutes
         * @param {string} storeId 매장 식별자 ID
         * @param {string} startDate [필터링] 시작 일자
         * @param {string} endDate [필터링] 종료 일자
         * @param {string} [userId] [필터링] 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdGet: async (storeId: string, startDate: string, endDate: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('commutesStoreIdGet', 'storeId', storeId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('commutesStoreIdGet', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('commutesStoreIdGet', 'endDate', endDate)
            const localVarPath = `/commutes/{storeId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 출퇴근 등록
         * @summary addCommute
         * @param {CommutesStoreIdPostRequest} [commutesStoreIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdPost: async (commutesStoreIdPostRequest?: CommutesStoreIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commutes/{storeId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commutesStoreIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 출퇴근 수정
         * @summary updateCommute
         * @param {CommutesStoreIdPutRequest} [commutesStoreIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdPut: async (commutesStoreIdPutRequest?: CommutesStoreIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commutes/{storeId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commutesStoreIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 기간 동안의 출퇴근 시간 합산 조회
         * @summary getCommuteTotalWorkTime
         * @param {string} storeId 매장 식별자 ID
         * @param {string} userId 사용자 식별자 ID
         * @param {string} startDate [필터링] 시작 일자
         * @param {string} endDate [필터링] 종료 일자
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdTotalWorkTimeGet: async (storeId: string, userId: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('commutesStoreIdTotalWorkTimeGet', 'storeId', storeId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('commutesStoreIdTotalWorkTimeGet', 'userId', userId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('commutesStoreIdTotalWorkTimeGet', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('commutesStoreIdTotalWorkTimeGet', 'endDate', endDate)
            const localVarPath = `/commutes/{storeId}/total-work-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 출퇴근 기록 수정
         * @summary updateWorkTime
         * @param {CommutesStoreIdWorktimePutRequest} [commutesStoreIdWorktimePutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdWorktimePut: async (commutesStoreIdWorktimePutRequest?: CommutesStoreIdWorktimePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commutes/{storeId}/worktime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commutesStoreIdWorktimePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommutesApi - functional programming interface
 * @export
 */
export const CommutesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommutesApiAxiosParamCreator(configuration)
    return {
        /**
         * 퇴근
         * @summary updateCommuteWorkEnd
         * @param {CommutesIdEndPutRequest} [commutesIdEndPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commutesIdEndPut(commutesIdEndPutRequest?: CommutesIdEndPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commutesIdEndPut(commutesIdEndPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommutesApi.commutesIdEndPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 출근
         * @summary updateCommuteWorkStart
         * @param {CommutesIdEndPutRequest} [commutesIdEndPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commutesIdStartPut(commutesIdEndPutRequest?: CommutesIdEndPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commutesIdStartPut(commutesIdEndPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommutesApi.commutesIdStartPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 출퇴근 목록 조회
         * @summary getCommutes
         * @param {string} storeId 매장 식별자 ID
         * @param {string} startDate [필터링] 시작 일자
         * @param {string} endDate [필터링] 종료 일자
         * @param {string} [userId] [필터링] 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commutesStoreIdGet(storeId: string, startDate: string, endDate: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commutesStoreIdGet(storeId, startDate, endDate, userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommutesApi.commutesStoreIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 출퇴근 등록
         * @summary addCommute
         * @param {CommutesStoreIdPostRequest} [commutesStoreIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commutesStoreIdPost(commutesStoreIdPostRequest?: CommutesStoreIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commutesStoreIdPost(commutesStoreIdPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommutesApi.commutesStoreIdPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 출퇴근 수정
         * @summary updateCommute
         * @param {CommutesStoreIdPutRequest} [commutesStoreIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commutesStoreIdPut(commutesStoreIdPutRequest?: CommutesStoreIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commutesStoreIdPut(commutesStoreIdPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommutesApi.commutesStoreIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 특정 기간 동안의 출퇴근 시간 합산 조회
         * @summary getCommuteTotalWorkTime
         * @param {string} storeId 매장 식별자 ID
         * @param {string} userId 사용자 식별자 ID
         * @param {string} startDate [필터링] 시작 일자
         * @param {string} endDate [필터링] 종료 일자
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commutesStoreIdTotalWorkTimeGet(storeId: string, userId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commutesStoreIdTotalWorkTimeGet(storeId, userId, startDate, endDate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommutesApi.commutesStoreIdTotalWorkTimeGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 출퇴근 기록 수정
         * @summary updateWorkTime
         * @param {CommutesStoreIdWorktimePutRequest} [commutesStoreIdWorktimePutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commutesStoreIdWorktimePut(commutesStoreIdWorktimePutRequest?: CommutesStoreIdWorktimePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commutesStoreIdWorktimePut(commutesStoreIdWorktimePutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommutesApi.commutesStoreIdWorktimePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CommutesApi - factory interface
 * @export
 */
export const CommutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommutesApiFp(configuration)
    return {
        /**
         * 퇴근
         * @summary updateCommuteWorkEnd
         * @param {CommutesApiCommutesIdEndPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesIdEndPut(requestParameters: CommutesApiCommutesIdEndPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commutesIdEndPut(requestParameters.commutesIdEndPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 출근
         * @summary updateCommuteWorkStart
         * @param {CommutesApiCommutesIdStartPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesIdStartPut(requestParameters: CommutesApiCommutesIdStartPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commutesIdStartPut(requestParameters.commutesIdEndPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 출퇴근 목록 조회
         * @summary getCommutes
         * @param {CommutesApiCommutesStoreIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdGet(requestParameters: CommutesApiCommutesStoreIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commutesStoreIdGet(requestParameters.storeId, requestParameters.startDate, requestParameters.endDate, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 출퇴근 등록
         * @summary addCommute
         * @param {CommutesApiCommutesStoreIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdPost(requestParameters: CommutesApiCommutesStoreIdPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commutesStoreIdPost(requestParameters.commutesStoreIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 출퇴근 수정
         * @summary updateCommute
         * @param {CommutesApiCommutesStoreIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdPut(requestParameters: CommutesApiCommutesStoreIdPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commutesStoreIdPut(requestParameters.commutesStoreIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 기간 동안의 출퇴근 시간 합산 조회
         * @summary getCommuteTotalWorkTime
         * @param {CommutesApiCommutesStoreIdTotalWorkTimeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdTotalWorkTimeGet(requestParameters: CommutesApiCommutesStoreIdTotalWorkTimeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commutesStoreIdTotalWorkTimeGet(requestParameters.storeId, requestParameters.userId, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 출퇴근 기록 수정
         * @summary updateWorkTime
         * @param {CommutesApiCommutesStoreIdWorktimePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commutesStoreIdWorktimePut(requestParameters: CommutesApiCommutesStoreIdWorktimePutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commutesStoreIdWorktimePut(requestParameters.commutesStoreIdWorktimePutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for commutesIdEndPut operation in CommutesApi.
 * @export
 * @interface CommutesApiCommutesIdEndPutRequest
 */
export interface CommutesApiCommutesIdEndPutRequest {
    /**
     * 
     * @type {CommutesIdEndPutRequest}
     * @memberof CommutesApiCommutesIdEndPut
     */
    readonly commutesIdEndPutRequest?: CommutesIdEndPutRequest
}

/**
 * Request parameters for commutesIdStartPut operation in CommutesApi.
 * @export
 * @interface CommutesApiCommutesIdStartPutRequest
 */
export interface CommutesApiCommutesIdStartPutRequest {
    /**
     * 
     * @type {CommutesIdEndPutRequest}
     * @memberof CommutesApiCommutesIdStartPut
     */
    readonly commutesIdEndPutRequest?: CommutesIdEndPutRequest
}

/**
 * Request parameters for commutesStoreIdGet operation in CommutesApi.
 * @export
 * @interface CommutesApiCommutesStoreIdGetRequest
 */
export interface CommutesApiCommutesStoreIdGetRequest {
    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof CommutesApiCommutesStoreIdGet
     */
    readonly storeId: string

    /**
     * [필터링] 시작 일자
     * @type {string}
     * @memberof CommutesApiCommutesStoreIdGet
     */
    readonly startDate: string

    /**
     * [필터링] 종료 일자
     * @type {string}
     * @memberof CommutesApiCommutesStoreIdGet
     */
    readonly endDate: string

    /**
     * [필터링] 사용자 식별자 ID
     * @type {string}
     * @memberof CommutesApiCommutesStoreIdGet
     */
    readonly userId?: string
}

/**
 * Request parameters for commutesStoreIdPost operation in CommutesApi.
 * @export
 * @interface CommutesApiCommutesStoreIdPostRequest
 */
export interface CommutesApiCommutesStoreIdPostRequest {
    /**
     * 
     * @type {CommutesStoreIdPostRequest}
     * @memberof CommutesApiCommutesStoreIdPost
     */
    readonly commutesStoreIdPostRequest?: CommutesStoreIdPostRequest
}

/**
 * Request parameters for commutesStoreIdPut operation in CommutesApi.
 * @export
 * @interface CommutesApiCommutesStoreIdPutRequest
 */
export interface CommutesApiCommutesStoreIdPutRequest {
    /**
     * 
     * @type {CommutesStoreIdPutRequest}
     * @memberof CommutesApiCommutesStoreIdPut
     */
    readonly commutesStoreIdPutRequest?: CommutesStoreIdPutRequest
}

/**
 * Request parameters for commutesStoreIdTotalWorkTimeGet operation in CommutesApi.
 * @export
 * @interface CommutesApiCommutesStoreIdTotalWorkTimeGetRequest
 */
export interface CommutesApiCommutesStoreIdTotalWorkTimeGetRequest {
    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof CommutesApiCommutesStoreIdTotalWorkTimeGet
     */
    readonly storeId: string

    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof CommutesApiCommutesStoreIdTotalWorkTimeGet
     */
    readonly userId: string

    /**
     * [필터링] 시작 일자
     * @type {string}
     * @memberof CommutesApiCommutesStoreIdTotalWorkTimeGet
     */
    readonly startDate: string

    /**
     * [필터링] 종료 일자
     * @type {string}
     * @memberof CommutesApiCommutesStoreIdTotalWorkTimeGet
     */
    readonly endDate: string
}

/**
 * Request parameters for commutesStoreIdWorktimePut operation in CommutesApi.
 * @export
 * @interface CommutesApiCommutesStoreIdWorktimePutRequest
 */
export interface CommutesApiCommutesStoreIdWorktimePutRequest {
    /**
     * 
     * @type {CommutesStoreIdWorktimePutRequest}
     * @memberof CommutesApiCommutesStoreIdWorktimePut
     */
    readonly commutesStoreIdWorktimePutRequest?: CommutesStoreIdWorktimePutRequest
}

/**
 * CommutesApi - object-oriented interface
 * @export
 * @class CommutesApi
 * @extends {BaseAPI}
 */
export class CommutesApi extends BaseAPI {
    /**
     * 퇴근
     * @summary updateCommuteWorkEnd
     * @param {CommutesApiCommutesIdEndPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommutesApi
     */
    public commutesIdEndPut(requestParameters: CommutesApiCommutesIdEndPutRequest = {}, options?: RawAxiosRequestConfig) {
        return CommutesApiFp(this.configuration).commutesIdEndPut(requestParameters.commutesIdEndPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 출근
     * @summary updateCommuteWorkStart
     * @param {CommutesApiCommutesIdStartPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommutesApi
     */
    public commutesIdStartPut(requestParameters: CommutesApiCommutesIdStartPutRequest = {}, options?: RawAxiosRequestConfig) {
        return CommutesApiFp(this.configuration).commutesIdStartPut(requestParameters.commutesIdEndPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 출퇴근 목록 조회
     * @summary getCommutes
     * @param {CommutesApiCommutesStoreIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommutesApi
     */
    public commutesStoreIdGet(requestParameters: CommutesApiCommutesStoreIdGetRequest, options?: RawAxiosRequestConfig) {
        return CommutesApiFp(this.configuration).commutesStoreIdGet(requestParameters.storeId, requestParameters.startDate, requestParameters.endDate, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 출퇴근 등록
     * @summary addCommute
     * @param {CommutesApiCommutesStoreIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommutesApi
     */
    public commutesStoreIdPost(requestParameters: CommutesApiCommutesStoreIdPostRequest = {}, options?: RawAxiosRequestConfig) {
        return CommutesApiFp(this.configuration).commutesStoreIdPost(requestParameters.commutesStoreIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 출퇴근 수정
     * @summary updateCommute
     * @param {CommutesApiCommutesStoreIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommutesApi
     */
    public commutesStoreIdPut(requestParameters: CommutesApiCommutesStoreIdPutRequest = {}, options?: RawAxiosRequestConfig) {
        return CommutesApiFp(this.configuration).commutesStoreIdPut(requestParameters.commutesStoreIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 기간 동안의 출퇴근 시간 합산 조회
     * @summary getCommuteTotalWorkTime
     * @param {CommutesApiCommutesStoreIdTotalWorkTimeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommutesApi
     */
    public commutesStoreIdTotalWorkTimeGet(requestParameters: CommutesApiCommutesStoreIdTotalWorkTimeGetRequest, options?: RawAxiosRequestConfig) {
        return CommutesApiFp(this.configuration).commutesStoreIdTotalWorkTimeGet(requestParameters.storeId, requestParameters.userId, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 출퇴근 기록 수정
     * @summary updateWorkTime
     * @param {CommutesApiCommutesStoreIdWorktimePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommutesApi
     */
    public commutesStoreIdWorktimePut(requestParameters: CommutesApiCommutesStoreIdWorktimePutRequest = {}, options?: RawAxiosRequestConfig) {
        return CommutesApiFp(this.configuration).commutesStoreIdWorktimePut(requestParameters.commutesStoreIdWorktimePutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContractsApi - axios parameter creator
 * @export
 */
export const ContractsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 근로계약서 목록 조회
         * @summary getContracts
         * @param {string} storeId 매장 식별자 ID
         * @param {string} [userId] [점주-필터링] 사용자 식별자 ID
         * @param {string} [status] 서명 유형 [all (전체), wait (서명대기), completed (서명완료)]
         * @param {string} [order] 정렬 (최신순 &#x3D; createdAt,desc, 오래된순 &#x3D; createdAt,asc)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsGet: async (storeId: string, userId?: string, status?: string, order?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('contractsGet', 'storeId', storeId)
            const localVarPath = `/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 근로계약서 최종 서명
         * @summary completeContract
         * @param {ContractsIdCompletePutRequest} [contractsIdCompletePutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsIdCompletePut: async (contractsIdCompletePutRequest?: ContractsIdCompletePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contracts/{id}/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contractsIdCompletePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 근로계약서 상세조회
         * @summary getContractInfo
         * @param {string} storeId 매장 식별자 ID
         * @param {string} id 근로계약서 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsIdGet: async (storeId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('contractsIdGet', 'storeId', storeId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contractsIdGet', 'id', id)
            const localVarPath = `/contracts/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 근로계약서 등록
         * @summary createContract
         * @param {ContractsPostRequest} [contractsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsPost: async (contractsPostRequest?: ContractsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contractsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractsApi - functional programming interface
 * @export
 */
export const ContractsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractsApiAxiosParamCreator(configuration)
    return {
        /**
         * 근로계약서 목록 조회
         * @summary getContracts
         * @param {string} storeId 매장 식별자 ID
         * @param {string} [userId] [점주-필터링] 사용자 식별자 ID
         * @param {string} [status] 서명 유형 [all (전체), wait (서명대기), completed (서명완료)]
         * @param {string} [order] 정렬 (최신순 &#x3D; createdAt,desc, 오래된순 &#x3D; createdAt,asc)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contractsGet(storeId: string, userId?: string, status?: string, order?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contractsGet(storeId, userId, status, order, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContractsApi.contractsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 근로계약서 최종 서명
         * @summary completeContract
         * @param {ContractsIdCompletePutRequest} [contractsIdCompletePutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contractsIdCompletePut(contractsIdCompletePutRequest?: ContractsIdCompletePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contractsIdCompletePut(contractsIdCompletePutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContractsApi.contractsIdCompletePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 근로계약서 상세조회
         * @summary getContractInfo
         * @param {string} storeId 매장 식별자 ID
         * @param {string} id 근로계약서 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contractsIdGet(storeId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contractsIdGet(storeId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContractsApi.contractsIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 근로계약서 등록
         * @summary createContract
         * @param {ContractsPostRequest} [contractsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contractsPost(contractsPostRequest?: ContractsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contractsPost(contractsPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContractsApi.contractsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ContractsApi - factory interface
 * @export
 */
export const ContractsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractsApiFp(configuration)
    return {
        /**
         * 근로계약서 목록 조회
         * @summary getContracts
         * @param {ContractsApiContractsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsGet(requestParameters: ContractsApiContractsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contractsGet(requestParameters.storeId, requestParameters.userId, requestParameters.status, requestParameters.order, options).then((request) => request(axios, basePath));
        },
        /**
         * 근로계약서 최종 서명
         * @summary completeContract
         * @param {ContractsApiContractsIdCompletePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsIdCompletePut(requestParameters: ContractsApiContractsIdCompletePutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contractsIdCompletePut(requestParameters.contractsIdCompletePutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 근로계약서 상세조회
         * @summary getContractInfo
         * @param {ContractsApiContractsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsIdGet(requestParameters: ContractsApiContractsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contractsIdGet(requestParameters.storeId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 근로계약서 등록
         * @summary createContract
         * @param {ContractsApiContractsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsPost(requestParameters: ContractsApiContractsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contractsPost(requestParameters.contractsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for contractsGet operation in ContractsApi.
 * @export
 * @interface ContractsApiContractsGetRequest
 */
export interface ContractsApiContractsGetRequest {
    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof ContractsApiContractsGet
     */
    readonly storeId: string

    /**
     * [점주-필터링] 사용자 식별자 ID
     * @type {string}
     * @memberof ContractsApiContractsGet
     */
    readonly userId?: string

    /**
     * 서명 유형 [all (전체), wait (서명대기), completed (서명완료)]
     * @type {string}
     * @memberof ContractsApiContractsGet
     */
    readonly status?: string

    /**
     * 정렬 (최신순 &#x3D; createdAt,desc, 오래된순 &#x3D; createdAt,asc)
     * @type {string}
     * @memberof ContractsApiContractsGet
     */
    readonly order?: string
}

/**
 * Request parameters for contractsIdCompletePut operation in ContractsApi.
 * @export
 * @interface ContractsApiContractsIdCompletePutRequest
 */
export interface ContractsApiContractsIdCompletePutRequest {
    /**
     * 
     * @type {ContractsIdCompletePutRequest}
     * @memberof ContractsApiContractsIdCompletePut
     */
    readonly contractsIdCompletePutRequest?: ContractsIdCompletePutRequest
}

/**
 * Request parameters for contractsIdGet operation in ContractsApi.
 * @export
 * @interface ContractsApiContractsIdGetRequest
 */
export interface ContractsApiContractsIdGetRequest {
    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof ContractsApiContractsIdGet
     */
    readonly storeId: string

    /**
     * 근로계약서 식별자 ID
     * @type {string}
     * @memberof ContractsApiContractsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for contractsPost operation in ContractsApi.
 * @export
 * @interface ContractsApiContractsPostRequest
 */
export interface ContractsApiContractsPostRequest {
    /**
     * 
     * @type {ContractsPostRequest}
     * @memberof ContractsApiContractsPost
     */
    readonly contractsPostRequest?: ContractsPostRequest
}

/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export class ContractsApi extends BaseAPI {
    /**
     * 근로계약서 목록 조회
     * @summary getContracts
     * @param {ContractsApiContractsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public contractsGet(requestParameters: ContractsApiContractsGetRequest, options?: RawAxiosRequestConfig) {
        return ContractsApiFp(this.configuration).contractsGet(requestParameters.storeId, requestParameters.userId, requestParameters.status, requestParameters.order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 근로계약서 최종 서명
     * @summary completeContract
     * @param {ContractsApiContractsIdCompletePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public contractsIdCompletePut(requestParameters: ContractsApiContractsIdCompletePutRequest = {}, options?: RawAxiosRequestConfig) {
        return ContractsApiFp(this.configuration).contractsIdCompletePut(requestParameters.contractsIdCompletePutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 근로계약서 상세조회
     * @summary getContractInfo
     * @param {ContractsApiContractsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public contractsIdGet(requestParameters: ContractsApiContractsIdGetRequest, options?: RawAxiosRequestConfig) {
        return ContractsApiFp(this.configuration).contractsIdGet(requestParameters.storeId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 근로계약서 등록
     * @summary createContract
     * @param {ContractsApiContractsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public contractsPost(requestParameters: ContractsApiContractsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return ContractsApiFp(this.configuration).contractsPost(requestParameters.contractsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EmployInfoApi - axios parameter creator
 * @export
 */
export const EmployInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 삭제처리
         * @summary del
         * @param {EmployInfoDelPutRequest} [employInfoDelPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoDelPut: async (employInfoDelPutRequest?: EmployInfoDelPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employ-info/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employInfoDelPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 고용 정보 조회
         * @summary getEmployInfo
         * @param {string} userId 사용자 식별자 ID
         * @param {string} storeId 매장 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoGet: async (userId: string, storeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('employInfoGet', 'userId', userId)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('employInfoGet', 'storeId', storeId)
            const localVarPath = `/employ-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 고용 정보 변경
         * @summary setWorkScheduls
         * @param {EmployInfoPutRequest} [employInfoPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoPut: async (employInfoPutRequest?: EmployInfoPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employ-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employInfoPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 재입사
         * @summary rejoin
         * @param {EmployInfoDelPutRequest} [employInfoDelPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoRejoinPut: async (employInfoDelPutRequest?: EmployInfoDelPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employ-info/rejoin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employInfoDelPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 퇴사 처리
         * @summary resign
         * @param {EmployInfoResignPutRequest} [employInfoResignPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoResignPut: async (employInfoResignPutRequest?: EmployInfoResignPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employ-info/resign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employInfoResignPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployInfoApi - functional programming interface
 * @export
 */
export const EmployInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 삭제처리
         * @summary del
         * @param {EmployInfoDelPutRequest} [employInfoDelPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employInfoDelPut(employInfoDelPutRequest?: EmployInfoDelPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employInfoDelPut(employInfoDelPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployInfoApi.employInfoDelPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 고용 정보 조회
         * @summary getEmployInfo
         * @param {string} userId 사용자 식별자 ID
         * @param {string} storeId 매장 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employInfoGet(userId: string, storeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employInfoGet(userId, storeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployInfoApi.employInfoGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 고용 정보 변경
         * @summary setWorkScheduls
         * @param {EmployInfoPutRequest} [employInfoPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employInfoPut(employInfoPutRequest?: EmployInfoPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employInfoPut(employInfoPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployInfoApi.employInfoPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 재입사
         * @summary rejoin
         * @param {EmployInfoDelPutRequest} [employInfoDelPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employInfoRejoinPut(employInfoDelPutRequest?: EmployInfoDelPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employInfoRejoinPut(employInfoDelPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployInfoApi.employInfoRejoinPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 퇴사 처리
         * @summary resign
         * @param {EmployInfoResignPutRequest} [employInfoResignPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employInfoResignPut(employInfoResignPutRequest?: EmployInfoResignPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employInfoResignPut(employInfoResignPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployInfoApi.employInfoResignPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EmployInfoApi - factory interface
 * @export
 */
export const EmployInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployInfoApiFp(configuration)
    return {
        /**
         * 삭제처리
         * @summary del
         * @param {EmployInfoApiEmployInfoDelPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoDelPut(requestParameters: EmployInfoApiEmployInfoDelPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employInfoDelPut(requestParameters.employInfoDelPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 고용 정보 조회
         * @summary getEmployInfo
         * @param {EmployInfoApiEmployInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoGet(requestParameters: EmployInfoApiEmployInfoGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employInfoGet(requestParameters.userId, requestParameters.storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 고용 정보 변경
         * @summary setWorkScheduls
         * @param {EmployInfoApiEmployInfoPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoPut(requestParameters: EmployInfoApiEmployInfoPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employInfoPut(requestParameters.employInfoPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 재입사
         * @summary rejoin
         * @param {EmployInfoApiEmployInfoRejoinPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoRejoinPut(requestParameters: EmployInfoApiEmployInfoRejoinPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employInfoRejoinPut(requestParameters.employInfoDelPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 퇴사 처리
         * @summary resign
         * @param {EmployInfoApiEmployInfoResignPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employInfoResignPut(requestParameters: EmployInfoApiEmployInfoResignPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employInfoResignPut(requestParameters.employInfoResignPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for employInfoDelPut operation in EmployInfoApi.
 * @export
 * @interface EmployInfoApiEmployInfoDelPutRequest
 */
export interface EmployInfoApiEmployInfoDelPutRequest {
    /**
     * 
     * @type {EmployInfoDelPutRequest}
     * @memberof EmployInfoApiEmployInfoDelPut
     */
    readonly employInfoDelPutRequest?: EmployInfoDelPutRequest
}

/**
 * Request parameters for employInfoGet operation in EmployInfoApi.
 * @export
 * @interface EmployInfoApiEmployInfoGetRequest
 */
export interface EmployInfoApiEmployInfoGetRequest {
    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof EmployInfoApiEmployInfoGet
     */
    readonly userId: string

    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof EmployInfoApiEmployInfoGet
     */
    readonly storeId: string
}

/**
 * Request parameters for employInfoPut operation in EmployInfoApi.
 * @export
 * @interface EmployInfoApiEmployInfoPutRequest
 */
export interface EmployInfoApiEmployInfoPutRequest {
    /**
     * 
     * @type {EmployInfoPutRequest}
     * @memberof EmployInfoApiEmployInfoPut
     */
    readonly employInfoPutRequest?: EmployInfoPutRequest
}

/**
 * Request parameters for employInfoRejoinPut operation in EmployInfoApi.
 * @export
 * @interface EmployInfoApiEmployInfoRejoinPutRequest
 */
export interface EmployInfoApiEmployInfoRejoinPutRequest {
    /**
     * 
     * @type {EmployInfoDelPutRequest}
     * @memberof EmployInfoApiEmployInfoRejoinPut
     */
    readonly employInfoDelPutRequest?: EmployInfoDelPutRequest
}

/**
 * Request parameters for employInfoResignPut operation in EmployInfoApi.
 * @export
 * @interface EmployInfoApiEmployInfoResignPutRequest
 */
export interface EmployInfoApiEmployInfoResignPutRequest {
    /**
     * 
     * @type {EmployInfoResignPutRequest}
     * @memberof EmployInfoApiEmployInfoResignPut
     */
    readonly employInfoResignPutRequest?: EmployInfoResignPutRequest
}

/**
 * EmployInfoApi - object-oriented interface
 * @export
 * @class EmployInfoApi
 * @extends {BaseAPI}
 */
export class EmployInfoApi extends BaseAPI {
    /**
     * 삭제처리
     * @summary del
     * @param {EmployInfoApiEmployInfoDelPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployInfoApi
     */
    public employInfoDelPut(requestParameters: EmployInfoApiEmployInfoDelPutRequest = {}, options?: RawAxiosRequestConfig) {
        return EmployInfoApiFp(this.configuration).employInfoDelPut(requestParameters.employInfoDelPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 고용 정보 조회
     * @summary getEmployInfo
     * @param {EmployInfoApiEmployInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployInfoApi
     */
    public employInfoGet(requestParameters: EmployInfoApiEmployInfoGetRequest, options?: RawAxiosRequestConfig) {
        return EmployInfoApiFp(this.configuration).employInfoGet(requestParameters.userId, requestParameters.storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 고용 정보 변경
     * @summary setWorkScheduls
     * @param {EmployInfoApiEmployInfoPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployInfoApi
     */
    public employInfoPut(requestParameters: EmployInfoApiEmployInfoPutRequest = {}, options?: RawAxiosRequestConfig) {
        return EmployInfoApiFp(this.configuration).employInfoPut(requestParameters.employInfoPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 재입사
     * @summary rejoin
     * @param {EmployInfoApiEmployInfoRejoinPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployInfoApi
     */
    public employInfoRejoinPut(requestParameters: EmployInfoApiEmployInfoRejoinPutRequest = {}, options?: RawAxiosRequestConfig) {
        return EmployInfoApiFp(this.configuration).employInfoRejoinPut(requestParameters.employInfoDelPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 퇴사 처리
     * @summary resign
     * @param {EmployInfoApiEmployInfoResignPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployInfoApi
     */
    public employInfoResignPut(requestParameters: EmployInfoApiEmployInfoResignPutRequest = {}, options?: RawAxiosRequestConfig) {
        return EmployInfoApiFp(this.configuration).employInfoResignPut(requestParameters.employInfoResignPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FirebaseApi - axios parameter creator
 * @export
 */
export const FirebaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * push 테스트
         * @summary sendMessaging
         * @param {string} deviceToken firebase device token
         * @param {string} title 메시지 제목
         * @param {string} body 메시지 내용
         * @param {string} actionData 링크 이동 주소
         * @param {string} [userId] 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packagesFirebaseMessagingSendGet: async (deviceToken: string, title: string, body: string, actionData: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceToken' is not null or undefined
            assertParamExists('packagesFirebaseMessagingSendGet', 'deviceToken', deviceToken)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('packagesFirebaseMessagingSendGet', 'title', title)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('packagesFirebaseMessagingSendGet', 'body', body)
            // verify required parameter 'actionData' is not null or undefined
            assertParamExists('packagesFirebaseMessagingSendGet', 'actionData', actionData)
            const localVarPath = `/packages/firebase/messaging/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceToken !== undefined) {
                localVarQueryParameter['deviceToken'] = deviceToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (body !== undefined) {
                localVarQueryParameter['body'] = body;
            }

            if (actionData !== undefined) {
                localVarQueryParameter['actionData'] = actionData;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FirebaseApi - functional programming interface
 * @export
 */
export const FirebaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FirebaseApiAxiosParamCreator(configuration)
    return {
        /**
         * push 테스트
         * @summary sendMessaging
         * @param {string} deviceToken firebase device token
         * @param {string} title 메시지 제목
         * @param {string} body 메시지 내용
         * @param {string} actionData 링크 이동 주소
         * @param {string} [userId] 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packagesFirebaseMessagingSendGet(deviceToken: string, title: string, body: string, actionData: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.packagesFirebaseMessagingSendGet(deviceToken, title, body, actionData, userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FirebaseApi.packagesFirebaseMessagingSendGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * FirebaseApi - factory interface
 * @export
 */
export const FirebaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FirebaseApiFp(configuration)
    return {
        /**
         * push 테스트
         * @summary sendMessaging
         * @param {FirebaseApiPackagesFirebaseMessagingSendGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packagesFirebaseMessagingSendGet(requestParameters: FirebaseApiPackagesFirebaseMessagingSendGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.packagesFirebaseMessagingSendGet(requestParameters.deviceToken, requestParameters.title, requestParameters.body, requestParameters.actionData, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for packagesFirebaseMessagingSendGet operation in FirebaseApi.
 * @export
 * @interface FirebaseApiPackagesFirebaseMessagingSendGetRequest
 */
export interface FirebaseApiPackagesFirebaseMessagingSendGetRequest {
    /**
     * firebase device token
     * @type {string}
     * @memberof FirebaseApiPackagesFirebaseMessagingSendGet
     */
    readonly deviceToken: string

    /**
     * 메시지 제목
     * @type {string}
     * @memberof FirebaseApiPackagesFirebaseMessagingSendGet
     */
    readonly title: string

    /**
     * 메시지 내용
     * @type {string}
     * @memberof FirebaseApiPackagesFirebaseMessagingSendGet
     */
    readonly body: string

    /**
     * 링크 이동 주소
     * @type {string}
     * @memberof FirebaseApiPackagesFirebaseMessagingSendGet
     */
    readonly actionData: string

    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof FirebaseApiPackagesFirebaseMessagingSendGet
     */
    readonly userId?: string
}

/**
 * FirebaseApi - object-oriented interface
 * @export
 * @class FirebaseApi
 * @extends {BaseAPI}
 */
export class FirebaseApi extends BaseAPI {
    /**
     * push 테스트
     * @summary sendMessaging
     * @param {FirebaseApiPackagesFirebaseMessagingSendGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirebaseApi
     */
    public packagesFirebaseMessagingSendGet(requestParameters: FirebaseApiPackagesFirebaseMessagingSendGetRequest, options?: RawAxiosRequestConfig) {
        return FirebaseApiFp(this.configuration).packagesFirebaseMessagingSendGet(requestParameters.deviceToken, requestParameters.title, requestParameters.body, requestParameters.actionData, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 알림 목록 조회
         * @summary getNotifications
         * @param {string} storeId 매장 식별자 ID
         * @param {string} type 알림 타입 [\&quot;\&quot; (전체), commute (출퇴근), employee (직원), contract (근로계약서), paystub (월급명세서)]
         * @param {string} periodType 
         * @param {string} page 
         * @param {string} perpage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet: async (storeId: string, type: string, periodType: string, page: string, perpage: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('notificationsGet', 'storeId', storeId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('notificationsGet', 'type', type)
            // verify required parameter 'periodType' is not null or undefined
            assertParamExists('notificationsGet', 'periodType', periodType)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('notificationsGet', 'page', page)
            // verify required parameter 'perpage' is not null or undefined
            assertParamExists('notificationsGet', 'perpage', perpage)
            const localVarPath = `/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (periodType !== undefined) {
                localVarQueryParameter['periodType'] = periodType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perpage !== undefined) {
                localVarQueryParameter['perpage'] = perpage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 알림 목록 조회
         * @summary getNotifications
         * @param {string} storeId 매장 식별자 ID
         * @param {string} type 알림 타입 [\&quot;\&quot; (전체), commute (출퇴근), employee (직원), contract (근로계약서), paystub (월급명세서)]
         * @param {string} periodType 
         * @param {string} page 
         * @param {string} perpage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsGet(storeId: string, type: string, periodType: string, page: string, perpage: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsGet(storeId, type, periodType, page, perpage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['NotificationApi.notificationsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 알림 목록 조회
         * @summary getNotifications
         * @param {NotificationApiNotificationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet(requestParameters: NotificationApiNotificationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationsGet(requestParameters.storeId, requestParameters.type, requestParameters.periodType, requestParameters.page, requestParameters.perpage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for notificationsGet operation in NotificationApi.
 * @export
 * @interface NotificationApiNotificationsGetRequest
 */
export interface NotificationApiNotificationsGetRequest {
    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof NotificationApiNotificationsGet
     */
    readonly storeId: string

    /**
     * 알림 타입 [\&quot;\&quot; (전체), commute (출퇴근), employee (직원), contract (근로계약서), paystub (월급명세서)]
     * @type {string}
     * @memberof NotificationApiNotificationsGet
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof NotificationApiNotificationsGet
     */
    readonly periodType: string

    /**
     * 
     * @type {string}
     * @memberof NotificationApiNotificationsGet
     */
    readonly page: string

    /**
     * 
     * @type {string}
     * @memberof NotificationApiNotificationsGet
     */
    readonly perpage: string
}

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 알림 목록 조회
     * @summary getNotifications
     * @param {NotificationApiNotificationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationsGet(requestParameters: NotificationApiNotificationsGetRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationsGet(requestParameters.storeId, requestParameters.type, requestParameters.periodType, requestParameters.page, requestParameters.perpage, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaystubApi - axios parameter creator
 * @export
 */
export const PaystubApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 급여명세서 삭제
         * @summary delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsIdDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/paystubs/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 급여명세서 발송 및 재발송
         * @summary send
         * @param {PaystubsIdSendPostRequest} [paystubsIdSendPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsIdSendPost: async (paystubsIdSendPostRequest?: PaystubsIdSendPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/paystubs/{id}/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paystubsIdSendPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 급여명세서 상세 조회 ( 년월 )
         * @summary getPayStubSearch
         * @param {string} yyyymm 년월 (YYYY-MM)
         * @param {string} storeId 매장 식별자 ID
         * @param {string} userId 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsInfoGet: async (yyyymm: string, storeId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'yyyymm' is not null or undefined
            assertParamExists('paystubsInfoGet', 'yyyymm', yyyymm)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('paystubsInfoGet', 'storeId', storeId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('paystubsInfoGet', 'userId', userId)
            const localVarPath = `/paystubs/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (yyyymm !== undefined) {
                localVarQueryParameter['yyyymm'] = yyyymm;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 급여명세서 상세 조회 ( id )
         * @summary getPayStub
         * @param {string} id 급여명세서 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsInfoIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paystubsInfoIdGet', 'id', id)
            const localVarPath = `/paystubs/info/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 급여명세서 등록 및 수정
         * @summary setPaystub
         * @param {PaystubsPutRequest} [paystubsPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsPut: async (paystubsPutRequest?: PaystubsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/paystubs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paystubsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 급여명세서 직전 내역 조회
         * @summary getPayStubRecent
         * @param {string} storeId 매장 식별자 ID
         * @param {string} userId 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsRecentGet: async (storeId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('paystubsRecentGet', 'storeId', storeId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('paystubsRecentGet', 'userId', userId)
            const localVarPath = `/paystubs/recent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 급여명세서 목록 조회 (점주)
         * @summary getPaystubsForStorehead
         * @param {string} yyyymm 년월(YYYY-MM)\\
         * @param {string} storeId 매장 식별자 ID
         * @param {string} [userId] 사용자 식별자 ID
         * @param {string} [isSend] 발송상태 (false : 작성중, true : 발송완료)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsStoreheadGet: async (yyyymm: string, storeId: string, userId?: string, isSend?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'yyyymm' is not null or undefined
            assertParamExists('paystubsStoreheadGet', 'yyyymm', yyyymm)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('paystubsStoreheadGet', 'storeId', storeId)
            const localVarPath = `/paystubs/storehead`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (yyyymm !== undefined) {
                localVarQueryParameter['yyyymm'] = yyyymm;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (isSend !== undefined) {
                localVarQueryParameter['isSend'] = isSend;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 급여명세서 목록 조회 (직원)
         * @summary getPaystubsForStudent
         * @param {string} storeId 매장 식별자 ID
         * @param {string} userId 사용자 식별자 ID
         * @param {string} [isRecent] 정렬 (true : 최근, false : 오래된 순서)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsStudentGet: async (storeId: string, userId: string, isRecent?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('paystubsStudentGet', 'storeId', storeId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('paystubsStudentGet', 'userId', userId)
            const localVarPath = `/paystubs/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (isRecent !== undefined) {
                localVarQueryParameter['isRecent'] = isRecent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaystubApi - functional programming interface
 * @export
 */
export const PaystubApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaystubApiAxiosParamCreator(configuration)
    return {
        /**
         * 급여명세서 삭제
         * @summary delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paystubsIdDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paystubsIdDelete(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PaystubApi.paystubsIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 급여명세서 발송 및 재발송
         * @summary send
         * @param {PaystubsIdSendPostRequest} [paystubsIdSendPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paystubsIdSendPost(paystubsIdSendPostRequest?: PaystubsIdSendPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paystubsIdSendPost(paystubsIdSendPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PaystubApi.paystubsIdSendPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 급여명세서 상세 조회 ( 년월 )
         * @summary getPayStubSearch
         * @param {string} yyyymm 년월 (YYYY-MM)
         * @param {string} storeId 매장 식별자 ID
         * @param {string} userId 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paystubsInfoGet(yyyymm: string, storeId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paystubsInfoGet(yyyymm, storeId, userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PaystubApi.paystubsInfoGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 급여명세서 상세 조회 ( id )
         * @summary getPayStub
         * @param {string} id 급여명세서 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paystubsInfoIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paystubsInfoIdGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PaystubApi.paystubsInfoIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 급여명세서 등록 및 수정
         * @summary setPaystub
         * @param {PaystubsPutRequest} [paystubsPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paystubsPut(paystubsPutRequest?: PaystubsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paystubsPut(paystubsPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PaystubApi.paystubsPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 급여명세서 직전 내역 조회
         * @summary getPayStubRecent
         * @param {string} storeId 매장 식별자 ID
         * @param {string} userId 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paystubsRecentGet(storeId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paystubsRecentGet(storeId, userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PaystubApi.paystubsRecentGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 급여명세서 목록 조회 (점주)
         * @summary getPaystubsForStorehead
         * @param {string} yyyymm 년월(YYYY-MM)\\
         * @param {string} storeId 매장 식별자 ID
         * @param {string} [userId] 사용자 식별자 ID
         * @param {string} [isSend] 발송상태 (false : 작성중, true : 발송완료)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paystubsStoreheadGet(yyyymm: string, storeId: string, userId?: string, isSend?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paystubsStoreheadGet(yyyymm, storeId, userId, isSend, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PaystubApi.paystubsStoreheadGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 급여명세서 목록 조회 (직원)
         * @summary getPaystubsForStudent
         * @param {string} storeId 매장 식별자 ID
         * @param {string} userId 사용자 식별자 ID
         * @param {string} [isRecent] 정렬 (true : 최근, false : 오래된 순서)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paystubsStudentGet(storeId: string, userId: string, isRecent?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paystubsStudentGet(storeId, userId, isRecent, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PaystubApi.paystubsStudentGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PaystubApi - factory interface
 * @export
 */
export const PaystubApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaystubApiFp(configuration)
    return {
        /**
         * 급여명세서 삭제
         * @summary delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsIdDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paystubsIdDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 급여명세서 발송 및 재발송
         * @summary send
         * @param {PaystubApiPaystubsIdSendPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsIdSendPost(requestParameters: PaystubApiPaystubsIdSendPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paystubsIdSendPost(requestParameters.paystubsIdSendPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 급여명세서 상세 조회 ( 년월 )
         * @summary getPayStubSearch
         * @param {PaystubApiPaystubsInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsInfoGet(requestParameters: PaystubApiPaystubsInfoGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paystubsInfoGet(requestParameters.yyyymm, requestParameters.storeId, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 급여명세서 상세 조회 ( id )
         * @summary getPayStub
         * @param {PaystubApiPaystubsInfoIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsInfoIdGet(requestParameters: PaystubApiPaystubsInfoIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paystubsInfoIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 급여명세서 등록 및 수정
         * @summary setPaystub
         * @param {PaystubApiPaystubsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsPut(requestParameters: PaystubApiPaystubsPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paystubsPut(requestParameters.paystubsPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 급여명세서 직전 내역 조회
         * @summary getPayStubRecent
         * @param {PaystubApiPaystubsRecentGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsRecentGet(requestParameters: PaystubApiPaystubsRecentGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paystubsRecentGet(requestParameters.storeId, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 급여명세서 목록 조회 (점주)
         * @summary getPaystubsForStorehead
         * @param {PaystubApiPaystubsStoreheadGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsStoreheadGet(requestParameters: PaystubApiPaystubsStoreheadGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paystubsStoreheadGet(requestParameters.yyyymm, requestParameters.storeId, requestParameters.userId, requestParameters.isSend, options).then((request) => request(axios, basePath));
        },
        /**
         * 급여명세서 목록 조회 (직원)
         * @summary getPaystubsForStudent
         * @param {PaystubApiPaystubsStudentGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paystubsStudentGet(requestParameters: PaystubApiPaystubsStudentGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paystubsStudentGet(requestParameters.storeId, requestParameters.userId, requestParameters.isRecent, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for paystubsIdSendPost operation in PaystubApi.
 * @export
 * @interface PaystubApiPaystubsIdSendPostRequest
 */
export interface PaystubApiPaystubsIdSendPostRequest {
    /**
     * 
     * @type {PaystubsIdSendPostRequest}
     * @memberof PaystubApiPaystubsIdSendPost
     */
    readonly paystubsIdSendPostRequest?: PaystubsIdSendPostRequest
}

/**
 * Request parameters for paystubsInfoGet operation in PaystubApi.
 * @export
 * @interface PaystubApiPaystubsInfoGetRequest
 */
export interface PaystubApiPaystubsInfoGetRequest {
    /**
     * 년월 (YYYY-MM)
     * @type {string}
     * @memberof PaystubApiPaystubsInfoGet
     */
    readonly yyyymm: string

    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsInfoGet
     */
    readonly storeId: string

    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsInfoGet
     */
    readonly userId: string
}

/**
 * Request parameters for paystubsInfoIdGet operation in PaystubApi.
 * @export
 * @interface PaystubApiPaystubsInfoIdGetRequest
 */
export interface PaystubApiPaystubsInfoIdGetRequest {
    /**
     * 급여명세서 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsInfoIdGet
     */
    readonly id: string
}

/**
 * Request parameters for paystubsPut operation in PaystubApi.
 * @export
 * @interface PaystubApiPaystubsPutRequest
 */
export interface PaystubApiPaystubsPutRequest {
    /**
     * 
     * @type {PaystubsPutRequest}
     * @memberof PaystubApiPaystubsPut
     */
    readonly paystubsPutRequest?: PaystubsPutRequest
}

/**
 * Request parameters for paystubsRecentGet operation in PaystubApi.
 * @export
 * @interface PaystubApiPaystubsRecentGetRequest
 */
export interface PaystubApiPaystubsRecentGetRequest {
    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsRecentGet
     */
    readonly storeId: string

    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsRecentGet
     */
    readonly userId: string
}

/**
 * Request parameters for paystubsStoreheadGet operation in PaystubApi.
 * @export
 * @interface PaystubApiPaystubsStoreheadGetRequest
 */
export interface PaystubApiPaystubsStoreheadGetRequest {
    /**
     * 년월(YYYY-MM)\\
     * @type {string}
     * @memberof PaystubApiPaystubsStoreheadGet
     */
    readonly yyyymm: string

    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsStoreheadGet
     */
    readonly storeId: string

    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsStoreheadGet
     */
    readonly userId?: string

    /**
     * 발송상태 (false : 작성중, true : 발송완료)
     * @type {string}
     * @memberof PaystubApiPaystubsStoreheadGet
     */
    readonly isSend?: string
}

/**
 * Request parameters for paystubsStudentGet operation in PaystubApi.
 * @export
 * @interface PaystubApiPaystubsStudentGetRequest
 */
export interface PaystubApiPaystubsStudentGetRequest {
    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsStudentGet
     */
    readonly storeId: string

    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof PaystubApiPaystubsStudentGet
     */
    readonly userId: string

    /**
     * 정렬 (true : 최근, false : 오래된 순서)
     * @type {string}
     * @memberof PaystubApiPaystubsStudentGet
     */
    readonly isRecent?: string
}

/**
 * PaystubApi - object-oriented interface
 * @export
 * @class PaystubApi
 * @extends {BaseAPI}
 */
export class PaystubApi extends BaseAPI {
    /**
     * 급여명세서 삭제
     * @summary delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaystubApi
     */
    public paystubsIdDelete(options?: RawAxiosRequestConfig) {
        return PaystubApiFp(this.configuration).paystubsIdDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 급여명세서 발송 및 재발송
     * @summary send
     * @param {PaystubApiPaystubsIdSendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaystubApi
     */
    public paystubsIdSendPost(requestParameters: PaystubApiPaystubsIdSendPostRequest = {}, options?: RawAxiosRequestConfig) {
        return PaystubApiFp(this.configuration).paystubsIdSendPost(requestParameters.paystubsIdSendPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 급여명세서 상세 조회 ( 년월 )
     * @summary getPayStubSearch
     * @param {PaystubApiPaystubsInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaystubApi
     */
    public paystubsInfoGet(requestParameters: PaystubApiPaystubsInfoGetRequest, options?: RawAxiosRequestConfig) {
        return PaystubApiFp(this.configuration).paystubsInfoGet(requestParameters.yyyymm, requestParameters.storeId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 급여명세서 상세 조회 ( id )
     * @summary getPayStub
     * @param {PaystubApiPaystubsInfoIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaystubApi
     */
    public paystubsInfoIdGet(requestParameters: PaystubApiPaystubsInfoIdGetRequest, options?: RawAxiosRequestConfig) {
        return PaystubApiFp(this.configuration).paystubsInfoIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 급여명세서 등록 및 수정
     * @summary setPaystub
     * @param {PaystubApiPaystubsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaystubApi
     */
    public paystubsPut(requestParameters: PaystubApiPaystubsPutRequest = {}, options?: RawAxiosRequestConfig) {
        return PaystubApiFp(this.configuration).paystubsPut(requestParameters.paystubsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 급여명세서 직전 내역 조회
     * @summary getPayStubRecent
     * @param {PaystubApiPaystubsRecentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaystubApi
     */
    public paystubsRecentGet(requestParameters: PaystubApiPaystubsRecentGetRequest, options?: RawAxiosRequestConfig) {
        return PaystubApiFp(this.configuration).paystubsRecentGet(requestParameters.storeId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 급여명세서 목록 조회 (점주)
     * @summary getPaystubsForStorehead
     * @param {PaystubApiPaystubsStoreheadGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaystubApi
     */
    public paystubsStoreheadGet(requestParameters: PaystubApiPaystubsStoreheadGetRequest, options?: RawAxiosRequestConfig) {
        return PaystubApiFp(this.configuration).paystubsStoreheadGet(requestParameters.yyyymm, requestParameters.storeId, requestParameters.userId, requestParameters.isSend, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 급여명세서 목록 조회 (직원)
     * @summary getPaystubsForStudent
     * @param {PaystubApiPaystubsStudentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaystubApi
     */
    public paystubsStudentGet(requestParameters: PaystubApiPaystubsStudentGetRequest, options?: RawAxiosRequestConfig) {
        return PaystubApiFp(this.configuration).paystubsStudentGet(requestParameters.storeId, requestParameters.userId, requestParameters.isRecent, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ResignHistoryApi - axios parameter creator
 * @export
 */
export const ResignHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 근무 상태 변경 이력 목록 조회
         * @summary getResignHistories
         * @param {string} userId 사용자 식별자 ID
         * @param {string} storeId 매장 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resignHistoriesGet: async (userId: string, storeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('resignHistoriesGet', 'userId', userId)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('resignHistoriesGet', 'storeId', storeId)
            const localVarPath = `/resign-histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 근무 상태 변경 이력 등록
         * @summary createResignHistory
         * @param {ResignHistoriesPostRequest} [resignHistoriesPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resignHistoriesPost: async (resignHistoriesPostRequest?: ResignHistoriesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resign-histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resignHistoriesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResignHistoryApi - functional programming interface
 * @export
 */
export const ResignHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResignHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 근무 상태 변경 이력 목록 조회
         * @summary getResignHistories
         * @param {string} userId 사용자 식별자 ID
         * @param {string} storeId 매장 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resignHistoriesGet(userId: string, storeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resignHistoriesGet(userId, storeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ResignHistoryApi.resignHistoriesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 근무 상태 변경 이력 등록
         * @summary createResignHistory
         * @param {ResignHistoriesPostRequest} [resignHistoriesPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resignHistoriesPost(resignHistoriesPostRequest?: ResignHistoriesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resignHistoriesPost(resignHistoriesPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ResignHistoryApi.resignHistoriesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ResignHistoryApi - factory interface
 * @export
 */
export const ResignHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResignHistoryApiFp(configuration)
    return {
        /**
         * 근무 상태 변경 이력 목록 조회
         * @summary getResignHistories
         * @param {ResignHistoryApiResignHistoriesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resignHistoriesGet(requestParameters: ResignHistoryApiResignHistoriesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resignHistoriesGet(requestParameters.userId, requestParameters.storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 근무 상태 변경 이력 등록
         * @summary createResignHistory
         * @param {ResignHistoryApiResignHistoriesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resignHistoriesPost(requestParameters: ResignHistoryApiResignHistoriesPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resignHistoriesPost(requestParameters.resignHistoriesPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for resignHistoriesGet operation in ResignHistoryApi.
 * @export
 * @interface ResignHistoryApiResignHistoriesGetRequest
 */
export interface ResignHistoryApiResignHistoriesGetRequest {
    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof ResignHistoryApiResignHistoriesGet
     */
    readonly userId: string

    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof ResignHistoryApiResignHistoriesGet
     */
    readonly storeId: string
}

/**
 * Request parameters for resignHistoriesPost operation in ResignHistoryApi.
 * @export
 * @interface ResignHistoryApiResignHistoriesPostRequest
 */
export interface ResignHistoryApiResignHistoriesPostRequest {
    /**
     * 
     * @type {ResignHistoriesPostRequest}
     * @memberof ResignHistoryApiResignHistoriesPost
     */
    readonly resignHistoriesPostRequest?: ResignHistoriesPostRequest
}

/**
 * ResignHistoryApi - object-oriented interface
 * @export
 * @class ResignHistoryApi
 * @extends {BaseAPI}
 */
export class ResignHistoryApi extends BaseAPI {
    /**
     * 근무 상태 변경 이력 목록 조회
     * @summary getResignHistories
     * @param {ResignHistoryApiResignHistoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResignHistoryApi
     */
    public resignHistoriesGet(requestParameters: ResignHistoryApiResignHistoriesGetRequest, options?: RawAxiosRequestConfig) {
        return ResignHistoryApiFp(this.configuration).resignHistoriesGet(requestParameters.userId, requestParameters.storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 근무 상태 변경 이력 등록
     * @summary createResignHistory
     * @param {ResignHistoryApiResignHistoriesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResignHistoryApi
     */
    public resignHistoriesPost(requestParameters: ResignHistoryApiResignHistoriesPostRequest = {}, options?: RawAxiosRequestConfig) {
        return ResignHistoryApiFp(this.configuration).resignHistoriesPost(requestParameters.resignHistoriesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SignApi - axios parameter creator
 * @export
 */
export const SignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 서명 삭제
         * @summary deleteSign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIdDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 서명 조회
         * @summary getUserSign
         * @param {string} [id] 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIdGet: async (id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 서명 변경
         * @summary putSign
         * @param {SignIdPutRequest} [signIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIdPut: async (signIdPutRequest?: SignIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignApi - functional programming interface
 * @export
 */
export const SignApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignApiAxiosParamCreator(configuration)
    return {
        /**
         * 서명 삭제
         * @summary deleteSign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIdDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIdDelete(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SignApi.signIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 사용자 서명 조회
         * @summary getUserSign
         * @param {string} [id] 사용자 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIdGet(id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIdGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SignApi.signIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 사용자 서명 변경
         * @summary putSign
         * @param {SignIdPutRequest} [signIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIdPut(signIdPutRequest?: SignIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIdPut(signIdPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SignApi.signIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SignApi - factory interface
 * @export
 */
export const SignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignApiFp(configuration)
    return {
        /**
         * 서명 삭제
         * @summary deleteSign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIdDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.signIdDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 서명 조회
         * @summary getUserSign
         * @param {SignApiSignIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIdGet(requestParameters: SignApiSignIdGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.signIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 서명 변경
         * @summary putSign
         * @param {SignApiSignIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIdPut(requestParameters: SignApiSignIdPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.signIdPut(requestParameters.signIdPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for signIdGet operation in SignApi.
 * @export
 * @interface SignApiSignIdGetRequest
 */
export interface SignApiSignIdGetRequest {
    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof SignApiSignIdGet
     */
    readonly id?: string
}

/**
 * Request parameters for signIdPut operation in SignApi.
 * @export
 * @interface SignApiSignIdPutRequest
 */
export interface SignApiSignIdPutRequest {
    /**
     * 
     * @type {SignIdPutRequest}
     * @memberof SignApiSignIdPut
     */
    readonly signIdPutRequest?: SignIdPutRequest
}

/**
 * SignApi - object-oriented interface
 * @export
 * @class SignApi
 * @extends {BaseAPI}
 */
export class SignApi extends BaseAPI {
    /**
     * 서명 삭제
     * @summary deleteSign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignApi
     */
    public signIdDelete(options?: RawAxiosRequestConfig) {
        return SignApiFp(this.configuration).signIdDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 서명 조회
     * @summary getUserSign
     * @param {SignApiSignIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignApi
     */
    public signIdGet(requestParameters: SignApiSignIdGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SignApiFp(this.configuration).signIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 서명 변경
     * @summary putSign
     * @param {SignApiSignIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignApi
     */
    public signIdPut(requestParameters: SignApiSignIdPutRequest = {}, options?: RawAxiosRequestConfig) {
        return SignApiFp(this.configuration).signIdPut(requestParameters.signIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StoresApi - axios parameter creator
 * @export
 */
export const StoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 매장 목록 조회
         * @summary getStores
         * @param {string} userId 점주 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('storesGet', 'userId', userId)
            const localVarPath = `/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 매장 조회
         * @summary getStore
         * @param {string} storeId Store ID 식별자
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesStoreIdGet: async (storeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storesStoreIdGet', 'storeId', storeId)
            const localVarPath = `/stores/{storeId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 매장 소속 회원 목록 조회 (재직중, 합류 대기, 퇴사자)
         * @summary getStoreMembers
         * @param {string} storeId Store ID 식별자
         * @param {string} status 직원 상태[all (전체 - 퇴사자 제외), office (재직중), wait (합류대기), resign (퇴사자)]
         * @param {string} [order] 정렬순서 [name(이름순),createdAt (퇴사일 순)] - status &#x3D; resign일 경우만 해당
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesStoreIdMembersGet: async (storeId: string, status: string, order?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storesStoreIdMembersGet', 'storeId', storeId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('storesStoreIdMembersGet', 'status', status)
            const localVarPath = `/stores/{storeId}/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 매장 정보 변경 ( 출퇴근 )
         * @summary putStore
         * @param {StoresStoreIdPutRequest} [storesStoreIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesStoreIdPut: async (storesStoreIdPutRequest?: StoresStoreIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stores/{storeId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(storesStoreIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoresApi - functional programming interface
 * @export
 */
export const StoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoresApiAxiosParamCreator(configuration)
    return {
        /**
         * 매장 목록 조회
         * @summary getStores
         * @param {string} userId 점주 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storesGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storesGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StoresApi.storesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 매장 조회
         * @summary getStore
         * @param {string} storeId Store ID 식별자
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storesStoreIdGet(storeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storesStoreIdGet(storeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StoresApi.storesStoreIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 매장 소속 회원 목록 조회 (재직중, 합류 대기, 퇴사자)
         * @summary getStoreMembers
         * @param {string} storeId Store ID 식별자
         * @param {string} status 직원 상태[all (전체 - 퇴사자 제외), office (재직중), wait (합류대기), resign (퇴사자)]
         * @param {string} [order] 정렬순서 [name(이름순),createdAt (퇴사일 순)] - status &#x3D; resign일 경우만 해당
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storesStoreIdMembersGet(storeId: string, status: string, order?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storesStoreIdMembersGet(storeId, status, order, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StoresApi.storesStoreIdMembersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 매장 정보 변경 ( 출퇴근 )
         * @summary putStore
         * @param {StoresStoreIdPutRequest} [storesStoreIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storesStoreIdPut(storesStoreIdPutRequest?: StoresStoreIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storesStoreIdPut(storesStoreIdPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StoresApi.storesStoreIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * StoresApi - factory interface
 * @export
 */
export const StoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoresApiFp(configuration)
    return {
        /**
         * 매장 목록 조회
         * @summary getStores
         * @param {StoresApiStoresGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesGet(requestParameters: StoresApiStoresGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storesGet(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 매장 조회
         * @summary getStore
         * @param {StoresApiStoresStoreIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesStoreIdGet(requestParameters: StoresApiStoresStoreIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storesStoreIdGet(requestParameters.storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 매장 소속 회원 목록 조회 (재직중, 합류 대기, 퇴사자)
         * @summary getStoreMembers
         * @param {StoresApiStoresStoreIdMembersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesStoreIdMembersGet(requestParameters: StoresApiStoresStoreIdMembersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storesStoreIdMembersGet(requestParameters.storeId, requestParameters.status, requestParameters.order, options).then((request) => request(axios, basePath));
        },
        /**
         * 매장 정보 변경 ( 출퇴근 )
         * @summary putStore
         * @param {StoresApiStoresStoreIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesStoreIdPut(requestParameters: StoresApiStoresStoreIdPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storesStoreIdPut(requestParameters.storesStoreIdPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for storesGet operation in StoresApi.
 * @export
 * @interface StoresApiStoresGetRequest
 */
export interface StoresApiStoresGetRequest {
    /**
     * 점주 ID
     * @type {string}
     * @memberof StoresApiStoresGet
     */
    readonly userId: string
}

/**
 * Request parameters for storesStoreIdGet operation in StoresApi.
 * @export
 * @interface StoresApiStoresStoreIdGetRequest
 */
export interface StoresApiStoresStoreIdGetRequest {
    /**
     * Store ID 식별자
     * @type {string}
     * @memberof StoresApiStoresStoreIdGet
     */
    readonly storeId: string
}

/**
 * Request parameters for storesStoreIdMembersGet operation in StoresApi.
 * @export
 * @interface StoresApiStoresStoreIdMembersGetRequest
 */
export interface StoresApiStoresStoreIdMembersGetRequest {
    /**
     * Store ID 식별자
     * @type {string}
     * @memberof StoresApiStoresStoreIdMembersGet
     */
    readonly storeId: string

    /**
     * 직원 상태[all (전체 - 퇴사자 제외), office (재직중), wait (합류대기), resign (퇴사자)]
     * @type {string}
     * @memberof StoresApiStoresStoreIdMembersGet
     */
    readonly status: string

    /**
     * 정렬순서 [name(이름순),createdAt (퇴사일 순)] - status &#x3D; resign일 경우만 해당
     * @type {string}
     * @memberof StoresApiStoresStoreIdMembersGet
     */
    readonly order?: string
}

/**
 * Request parameters for storesStoreIdPut operation in StoresApi.
 * @export
 * @interface StoresApiStoresStoreIdPutRequest
 */
export interface StoresApiStoresStoreIdPutRequest {
    /**
     * 
     * @type {StoresStoreIdPutRequest}
     * @memberof StoresApiStoresStoreIdPut
     */
    readonly storesStoreIdPutRequest?: StoresStoreIdPutRequest
}

/**
 * StoresApi - object-oriented interface
 * @export
 * @class StoresApi
 * @extends {BaseAPI}
 */
export class StoresApi extends BaseAPI {
    /**
     * 매장 목록 조회
     * @summary getStores
     * @param {StoresApiStoresGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public storesGet(requestParameters: StoresApiStoresGetRequest, options?: RawAxiosRequestConfig) {
        return StoresApiFp(this.configuration).storesGet(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 매장 조회
     * @summary getStore
     * @param {StoresApiStoresStoreIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public storesStoreIdGet(requestParameters: StoresApiStoresStoreIdGetRequest, options?: RawAxiosRequestConfig) {
        return StoresApiFp(this.configuration).storesStoreIdGet(requestParameters.storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 매장 소속 회원 목록 조회 (재직중, 합류 대기, 퇴사자)
     * @summary getStoreMembers
     * @param {StoresApiStoresStoreIdMembersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public storesStoreIdMembersGet(requestParameters: StoresApiStoresStoreIdMembersGetRequest, options?: RawAxiosRequestConfig) {
        return StoresApiFp(this.configuration).storesStoreIdMembersGet(requestParameters.storeId, requestParameters.status, requestParameters.order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 매장 정보 변경 ( 출퇴근 )
     * @summary putStore
     * @param {StoresApiStoresStoreIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public storesStoreIdPut(requestParameters: StoresApiStoresStoreIdPutRequest = {}, options?: RawAxiosRequestConfig) {
        return StoresApiFp(this.configuration).storesStoreIdPut(requestParameters.storesStoreIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TokensApi - axios parameter creator
 * @export
 */
export const TokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 토큰 등록 및 갱신
         * @summary putToken
         * @param {TokensPutRequest} [tokensPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokensPut: async (tokensPutRequest?: TokensPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokensPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokensApi - functional programming interface
 * @export
 */
export const TokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokensApiAxiosParamCreator(configuration)
    return {
        /**
         * 토큰 등록 및 갱신
         * @summary putToken
         * @param {TokensPutRequest} [tokensPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokensPut(tokensPutRequest?: TokensPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokensPut(tokensPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.tokensPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TokensApi - factory interface
 * @export
 */
export const TokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokensApiFp(configuration)
    return {
        /**
         * 토큰 등록 및 갱신
         * @summary putToken
         * @param {TokensApiTokensPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokensPut(requestParameters: TokensApiTokensPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tokensPut(requestParameters.tokensPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for tokensPut operation in TokensApi.
 * @export
 * @interface TokensApiTokensPutRequest
 */
export interface TokensApiTokensPutRequest {
    /**
     * 
     * @type {TokensPutRequest}
     * @memberof TokensApiTokensPut
     */
    readonly tokensPutRequest?: TokensPutRequest
}

/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export class TokensApi extends BaseAPI {
    /**
     * 토큰 등록 및 갱신
     * @summary putToken
     * @param {TokensApiTokensPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public tokensPut(requestParameters: TokensApiTokensPutRequest = {}, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).tokensPut(requestParameters.tokensPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 자격증 조회
         * @summary getLicense
         * @param {string} userId 사용자 식별자 ID
         * @param {string} storeId 매장 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLicenseGet: async (userId: string, storeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userLicenseGet', 'userId', userId)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('userLicenseGet', 'storeId', storeId)
            const localVarPath = `/user/license`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 정보 조회
         * @summary getUserMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 알림 변경
         * @summary putPush
         * @param {UserPushPutRequest} [userPushPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPushPut: async (userPushPutRequest?: UserPushPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userPushPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 약관 정보 변경
         * @summary putTermsAgree
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTermsAgreePut: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/terms-agree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 자격증 조회
         * @summary getLicense
         * @param {string} userId 사용자 식별자 ID
         * @param {string} storeId 매장 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLicenseGet(userId: string, storeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLicenseGet(userId, storeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userLicenseGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 사용자 정보 조회
         * @summary getUserMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userMeGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userMeGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 사용자 알림 변경
         * @summary putPush
         * @param {UserPushPutRequest} [userPushPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPushPut(userPushPutRequest?: UserPushPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPushPut(userPushPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userPushPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 사용자 약관 정보 변경
         * @summary putTermsAgree
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTermsAgreePut(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTermsAgreePut(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userTermsAgreePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 자격증 조회
         * @summary getLicense
         * @param {UserApiUserLicenseGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLicenseGet(requestParameters: UserApiUserLicenseGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userLicenseGet(requestParameters.userId, requestParameters.storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 정보 조회
         * @summary getUserMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userMeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 알림 변경
         * @summary putPush
         * @param {UserApiUserPushPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPushPut(requestParameters: UserApiUserPushPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userPushPut(requestParameters.userPushPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 약관 정보 변경
         * @summary putTermsAgree
         * @param {UserApiUserTermsAgreePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTermsAgreePut(requestParameters: UserApiUserTermsAgreePutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userTermsAgreePut(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userLicenseGet operation in UserApi.
 * @export
 * @interface UserApiUserLicenseGetRequest
 */
export interface UserApiUserLicenseGetRequest {
    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof UserApiUserLicenseGet
     */
    readonly userId: string

    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof UserApiUserLicenseGet
     */
    readonly storeId: string
}

/**
 * Request parameters for userPushPut operation in UserApi.
 * @export
 * @interface UserApiUserPushPutRequest
 */
export interface UserApiUserPushPutRequest {
    /**
     * 
     * @type {UserPushPutRequest}
     * @memberof UserApiUserPushPut
     */
    readonly userPushPutRequest?: UserPushPutRequest
}

/**
 * Request parameters for userTermsAgreePut operation in UserApi.
 * @export
 * @interface UserApiUserTermsAgreePutRequest
 */
export interface UserApiUserTermsAgreePutRequest {
    /**
     * 
     * @type {object}
     * @memberof UserApiUserTermsAgreePut
     */
    readonly body?: object
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 자격증 조회
     * @summary getLicense
     * @param {UserApiUserLicenseGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userLicenseGet(requestParameters: UserApiUserLicenseGetRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userLicenseGet(requestParameters.userId, requestParameters.storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 정보 조회
     * @summary getUserMe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userMeGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 알림 변경
     * @summary putPush
     * @param {UserApiUserPushPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userPushPut(requestParameters: UserApiUserPushPutRequest = {}, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userPushPut(requestParameters.userPushPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 약관 정보 변경
     * @summary putTermsAgree
     * @param {UserApiUserTermsAgreePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userTermsAgreePut(requestParameters: UserApiUserTermsAgreePutRequest = {}, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userTermsAgreePut(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkSchedulesApi - axios parameter creator
 * @export
 */
export const WorkSchedulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 근무 일정 목록 조회
         * @summary getWorkScheduls
         * @param {string} userId 사용자 식별자 ID
         * @param {string} storeId 매장 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workSchedulsGet: async (userId: string, storeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workSchedulsGet', 'userId', userId)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('workSchedulsGet', 'storeId', storeId)
            const localVarPath = `/work-scheduls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 근무 일정 등록 및 수정
         * @summary setWorkScheduls
         * @param {WorkSchedulsPutRequest} [workSchedulsPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workSchedulsPut: async (workSchedulsPutRequest?: WorkSchedulsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/work-scheduls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workSchedulsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkSchedulesApi - functional programming interface
 * @export
 */
export const WorkSchedulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkSchedulesApiAxiosParamCreator(configuration)
    return {
        /**
         * 근무 일정 목록 조회
         * @summary getWorkScheduls
         * @param {string} userId 사용자 식별자 ID
         * @param {string} storeId 매장 식별자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workSchedulsGet(userId: string, storeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workSchedulsGet(userId, storeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkSchedulesApi.workSchedulsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 근무 일정 등록 및 수정
         * @summary setWorkScheduls
         * @param {WorkSchedulsPutRequest} [workSchedulsPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workSchedulsPut(workSchedulsPutRequest?: WorkSchedulsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workSchedulsPut(workSchedulsPutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkSchedulesApi.workSchedulsPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WorkSchedulesApi - factory interface
 * @export
 */
export const WorkSchedulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkSchedulesApiFp(configuration)
    return {
        /**
         * 근무 일정 목록 조회
         * @summary getWorkScheduls
         * @param {WorkSchedulesApiWorkSchedulsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workSchedulsGet(requestParameters: WorkSchedulesApiWorkSchedulsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workSchedulsGet(requestParameters.userId, requestParameters.storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 근무 일정 등록 및 수정
         * @summary setWorkScheduls
         * @param {WorkSchedulesApiWorkSchedulsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workSchedulsPut(requestParameters: WorkSchedulesApiWorkSchedulsPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workSchedulsPut(requestParameters.workSchedulsPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for workSchedulsGet operation in WorkSchedulesApi.
 * @export
 * @interface WorkSchedulesApiWorkSchedulsGetRequest
 */
export interface WorkSchedulesApiWorkSchedulsGetRequest {
    /**
     * 사용자 식별자 ID
     * @type {string}
     * @memberof WorkSchedulesApiWorkSchedulsGet
     */
    readonly userId: string

    /**
     * 매장 식별자 ID
     * @type {string}
     * @memberof WorkSchedulesApiWorkSchedulsGet
     */
    readonly storeId: string
}

/**
 * Request parameters for workSchedulsPut operation in WorkSchedulesApi.
 * @export
 * @interface WorkSchedulesApiWorkSchedulsPutRequest
 */
export interface WorkSchedulesApiWorkSchedulsPutRequest {
    /**
     * 
     * @type {WorkSchedulsPutRequest}
     * @memberof WorkSchedulesApiWorkSchedulsPut
     */
    readonly workSchedulsPutRequest?: WorkSchedulsPutRequest
}

/**
 * WorkSchedulesApi - object-oriented interface
 * @export
 * @class WorkSchedulesApi
 * @extends {BaseAPI}
 */
export class WorkSchedulesApi extends BaseAPI {
    /**
     * 근무 일정 목록 조회
     * @summary getWorkScheduls
     * @param {WorkSchedulesApiWorkSchedulsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkSchedulesApi
     */
    public workSchedulsGet(requestParameters: WorkSchedulesApiWorkSchedulsGetRequest, options?: RawAxiosRequestConfig) {
        return WorkSchedulesApiFp(this.configuration).workSchedulsGet(requestParameters.userId, requestParameters.storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 근무 일정 등록 및 수정
     * @summary setWorkScheduls
     * @param {WorkSchedulesApiWorkSchedulsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkSchedulesApi
     */
    public workSchedulsPut(requestParameters: WorkSchedulesApiWorkSchedulsPutRequest = {}, options?: RawAxiosRequestConfig) {
        return WorkSchedulesApiFp(this.configuration).workSchedulsPut(requestParameters.workSchedulsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



